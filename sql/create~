create table projects
( id int unsigned not null auto_increment primary key,
  name varchar(50) not null
);

create table tasks
( id int unsigned not null auto_increment primary key,
  name varchar(50) not null
  status varchar(50) not null
  project_id int unsigned not null
);

create index index_tasks_name
  on tasks(name);

insert into projects values
  (1, "Red daisies"),
  (2, "Yellow cornflowers"),
  (3, "Green violet"),
  (4, "Narrow glass"),
  (5, "Napalm grass"),
  (6, "Sparkling fish"),
  (7, "Dark apple"),
  (8, "Armed cucumber"),
  (9, "Peppered unda"),
  (10, "Garage"),
  (11, "Sweetcorn"),
  (12, "Green cup");

insert into tasks values
  (1, "Plant daisies", "in progress", 1),
  (2, "Water daisies", "in progress", 1),
  (3, "Collect daisies", "done", 1),
  (4, "Paint daisies", "done", 1),
  (5, "Plant cornflowers", "done", 2),
  (6, "Water cornflowers", "done", 2),
  (7, "Collect cornflowers", "done", 2),
  (8, "Paint cornflowers", "delayed", 2),
  (9, "Plant violet", "delayed", 3),
  (10, "Water violet", "delayed", 3),
  (11, "Collect violet", "to do", 3),
  (12, "Paint violet", "to do", 3),
  (13, "Plant daisies", "delayed", 1),
  (14, "Do cornflowers", "done", 2),
  (15, "Do cornflowers", "done", 2),
  (16, "Do violet", "delayed", 3),
  (17, "Do violet", "to do", 3),
  (18, "Do violet", "to do", 3);
  (19, "Plant grass", "to do", 5),
  (20, "Water grass", "to do", 5),
  (21, "Collect glass", "to do", 4),
  (22, "Plant grass", "to do", 5),
  (23, "Water glass", "to do", 4),
  (24, "Collect grass", "to do", 5),
  (25, "Collect grass", "done", NULL),
  (26, "Collect grass", "done", NULL),
  (27, "Collect grass", "done", NULL),
  (28, "Fix issue", "to do", 10),
  (29, "Fix issue", "to do", 10),
  (30, "Fix issue", "done", 10),
  (31, "Ask user", "to do", 10),
  (32, "Ask user", "delayed", 10),
  (33, "Ask user", "delayed", 10),
  (34, "Ask user", "to do", 10),
  (35, "Make offer", "done", 10),
  (36, "Refund", "to do", 10),
  (37, "Refund", "to do", 10),
  (38, "Refund", "in progress", 10),
  (39, "Refund", "in progress", 10),
  (40, "Refund", "in progress", 10),
  (41, "Deny", "to do", 10),

insert into tasks(name, status, project_id) values
("Fix", "completed", 11),
("Water grass", "completed", 11),
("Water grass", "completed", 11),
("Fix", "completed", 11),
("Do violet", "completed", 11),
("Fix", "completed", 11),
("Water grass", "completed", 11),
("Do violet", "completed", 11),
("Fix", "completed", 11),
("Do violet", "completed", 11),
("Fix", "completed", 11),
("Paint daisies", "completed", 11),
("Fix", "completed", 11),
("Do violet", "not completed", 11),
("Fix", "not completed", 11),
("Do violet", "not completed", 11),
("Water grass", "not completed", 11),
("Fix", "not completed", 11),
("Paint daisies", "completed", 11),
("Create", "completed", 11),
("Create", "completed", 11),
("Plant grass", "completed", 12),
("Water grass", "completed", 12),
("Fix", "completed", 12),
("Create", "completed", 12),
("Fix", "completed", 12),
("Create", "completed", 12),
("Paint daisies", "completed", 12),
("Fix", "completed", 12),
("Create", "completed", 12),
("Plant grass", "completed", 12),
("Paint daisies", "not completed", 12),
("Fix", "not completed", 12),
("Plant grass", "not completed", 12),
("Plant grass", "not completed", 12),
("Fix", "not completed", 12);


UPDATE tasks
    SET status = 'to do'
    WHERE id between 11 and 12;

1.
get all statuses, not repeating, alphabetically ordered
select distinct status from tasks order by status;

2.
get the count of all tasks in each project, order by tasks count descending
select project_id, count(*) as cnt_prj from tasks group by project_id order by cnt_prj desc;

3.
get the count of all tasks in each project, order by projects names
select count(*), projects.name as prj_name 
from tasks 
  inner join projects on projects.id=tasks.project_id 
group by project_id 
order by prj_name;

4.
get the tasks for all projects having the name beginning with “N” letter
select projects.name as prj_name, tasks.name as tsk_name 
from projects 
  inner join tasks on projects.id=project_id 
where projects.name like 'N%';

5.
get the list of all projects containing the ‘a’ letter in the middle of the name, and show the
tasks count near each project. Mention that there can exist projects without tasks and
tasks with project_id=NULL
select projects.name, count(tasks.id) 
from projects 
  left join tasks on projects.id=tasks.project_id 
where projects.name like '_%a%_' 
group by projects.id 
order by projects.name;

6.
get the list of tasks with duplicate names. Order alphabetically
select name 
from tasks 
group by name 
having count(id)>1 
order by name;

7.
get the list of tasks having several exact matches of both name and status, from the
project ‘Garage’. Order by matches count
select name as task_name, status, cnt as task_count 
from 
  (select tasks.name, status, count(status) as cnt  
    from tasks inner join projects on tasks.project_id=projects.id 
    where projects.name="Garage" group by name, status) as grpd 
where grpd.cnt>1 
order by cnt;

8.
get the list of project names having more than 10 tasks in status ‘completed’. Order by
project_id
select projects.name as project 
from 
  (select tasks.name, tasks.project_id 
    from tasks 
    where tasks.status="completed") as comp_tasks 
  inner join projects on project_id=projects.id 
group by project_id 
having count(project_id)>=10;
